name: Mirror Mender Images to ECR

on:
  workflow_dispatch:

jobs:
  mirror:
    name: Mirror Mender Images to ECR
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ACCOUNT: ${{ secrets.ACCOUNT }}

      IMAGE_GROUPS: "TRAEFIK MENDER_MASTER MENDER_INVENTORY MENDER_DEVICE_AUTH MENDER_DEPLOYMENTS MENDER_CREATE_WORKER MENDER_DEVICE_CONFIG MENDER_GUI MENDER_IOT_MANAGER MENDER_WORKFLOWS MENDER_USERADM MENDER_DEVICE_CONNECT"

      TRAEFIK: "3.4.3"
      TRAEFIK_ECR_MAP: |
        {
          "docker.io/traefik": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/traefik"
        }
    
      MENDER_MASTER: "mender-master"
      MENDER_MASTER_ECR_MAP: |
        {
          "docker.io/mendersoftware/mender-client-docker-addons": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/mendersoftware/mender-client-docker-addons"
        }

      MENDER_INVENTORY: "v4.0.1"
      MENDER_INVENTORY_ECR_MAP: |
        {
          "docker.io/mendersoftware/inventory": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/mendersoftware/inventory"
        }

      MENDER_DEVICE_AUTH: "v4.0.1"
      MENDER_DEVICE_AUTH_ECR_MAP: |
        {
          "docker.io/mendersoftware/deviceauth": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/mendersoftware/deviceauth"
        }

      
      MENDER_DEPLOYMENTS: "v4.0.1"
      MENDER_DEPLOYMENTS_ECR_MAP: |
        {
          "docker.io/mendersoftware/deployments": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/mendersoftware/deployments"
        }

      
      MENDER_CREATE_WORKER: "v4.0.1"
      MENDER_CREATE_WORKER_ECR_MAP: |
        {
          "docker.io/mendersoftware/mendersoftware/create-artifact-worker": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/mendersoftware/mendersoftware/create-artifact-worker"
        }

      MENDER_DEVICE_CONFIG: "v4.0.1"
      MENDER_DEVICE_CONFIG_ECR_MAP: |
        {
          "docker.io/mendersoftware/deviceconfig": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/mendersoftware/deviceconfig"
        }

      
      MENDER_GUI: "v4.0.1"
      MENDER_GUI_ECR_MAP: |
        {
          "docker.io/mendersoftware/gui": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/mendersoftware/gui"
        }

    
      MENDER_IOT_MANAGER: "v4.0.1"
      MENDER_IOT_MANAGER_ECR_MAP: |
        {
          "docker.io/mendersoftware/iot-manager": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/mendersoftware/iot-manager"
        }

          
      MENDER_WORKFLOWS: "v4.0.1"
      MENDER_WORKFLOWS_ECR_MAP: |
        {
          "docker.io/mendersoftware/workflows": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/mendersoftware/workflows"
        }

        
      MENDER_USERADM: "v4.0.1"
      MENDER_USERADM_ECR_MAP: |
        {
          "docker.io/mendersoftware/useradm": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/mendersoftware/useradm"
        }

    
      MENDER_DEVICE_CONNECT: "v4.0.1"
      MENDER_DEVICE_CONNECT_ECR_MAP: |
        {
          "docker.io/mendersoftware/deviceconnect": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/mendersoftware/deviceconnect"
        }


    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Mirror Images from DockerHub to ECR
        run: |
          set -euo pipefail

          for GROUP in $IMAGE_GROUPS; do
            TAG_VAR="${GROUP}"
            MAP_VAR="${GROUP}_ECR_MAP"

            TAG="${!TAG_VAR}"
            RAW_MAP="${!MAP_VAR}"

            MAP=$(echo "$RAW_MAP" | envsubst)

            echo "Processing group: $GROUP"
            echo "Using tag: $TAG"

            if ! echo "$MAP" | jq empty; then
              echo "Invalid JSON in map for $GROUP"
              continue
            fi

            unset IMAGES || true
            declare -A IMAGES

            while IFS="=" read -r src dst; do
              src_clean="$(echo "$src" | xargs)"
              dst_clean="$(echo "$dst" | xargs)"
              IMAGES["$src_clean"]="$dst_clean"
            done < <(echo "$MAP" | jq -r 'to_entries[] | "\(.key)=\(.value)"')

            for SRC_IMAGE in "${!IMAGES[@]}"; do
              DST_IMAGE="${IMAGES[$SRC_IMAGE]}"
              
              echo "Checking availability of $SRC_IMAGE:$TAG"
              if ! docker manifest inspect "$SRC_IMAGE:$TAG" > /dev/null 2>&1; then
                echo "Image not found: $SRC_IMAGE:$TAG â€” skipping"
                continue
              fi

              echo "Pulling $SRC_IMAGE:$TAG"
              docker pull "$SRC_IMAGE:$TAG"

              echo "Tagging $DST_IMAGE:$TAG"
              docker tag "$SRC_IMAGE:$TAG" "$DST_IMAGE:$TAG"

              echo "Pushing $DST_IMAGE:$TAG"
              docker push "$DST_IMAGE:$TAG"
            done

            echo "Finished group: $GROUP"
            echo ""
          done
